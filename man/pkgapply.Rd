% Generated by roxygen2 (4.1.0.9000): do not edit by hand
% Please edit documentation in R/pkgpapply.R
\name{pkgapply}
\alias{pkgapply}
\title{Apply an operation over several packages.}
\usage{
pkgapply(packages = c('package1', 'package2'), dir = '/root/dir', f = function(pkg) { ... })
# Using current directory.
pkgapply(packages = c('package1', 'package2'), f = function(pkg) { ... })
# Auto-detect each directory which has a DESCRIPTION file in /root/dir.
pkgapply(dir = '/root/dir', f = function(pkg) { ... })
# Iterate over every auto-detected package in the current directory.
pkgapply(f = function(pkg) { ... })
}
\arguments{
\item{packages}{character. A character vector of package names.
These must be directories relative to \code{dir}.}

\item{dir}{character. The root directory on which to iterate over
all the packages. By default, the current working directory.}

\item{f}{function. The function to apply to each package.
The argument the function receives is
\code{devtools::as.package(pkg_path)}, where \code{pkg_path} is
the absolute path of the package. The output of this will be a list
with a \code{path} key, as well as keys corresponding to each
element in the DESCRIPTION file (\code{title}, \code{version}, etc.).}
}
\value{
A list where each element is the result of \code{f} applied
  to the respective package.
}
\description{
This function is meant to be used by R developers that have to make
simultaneous updates to many packages.
}
\note{
The argument \code{pkg} received by the function call on each iteration is
\code{devtools::as.package(pkg_path)}, which has a \code{$path} available
and whose other attributes originate directly from the package's DESCRIPTION
file.
}
\examples{
\dontrun{
  # You can use pkgapply to iterate over each package and apply some
  # operation.
  pkgapply(c('package1', 'package2'), dir = '/root/dir', function(pkg) { ... })

  # If you leave the package names blank, it will loop over all directories
  # relative to `dir` that contain a DESCRIPTION file and are thus recognized
  # as being R packages.
  pkgapply(dir = '/root/dir', function(pkg) { ... })

  # If you do not provide a directory, the current directory will be used.
  pkgapply(function(pkg) { ... })
}
}
\seealso{
\code{\link[devtools]{as.package}}
}

